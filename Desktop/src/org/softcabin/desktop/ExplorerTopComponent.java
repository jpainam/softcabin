/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.softcabin.desktop;
import org.openide.actions.CopyAction;
import org.openide.actions.CutAction;
import org.openide.actions.DeleteAction;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.actions.PasteAction;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.nodes.AbstractNode;
import org.openide.util.HelpCtx;
import org.softcabin.desktop.explorer.ExplorerFolderFactory;
import org.softcabin.desktop.explorer.ExplorerFolderNode;
import org.softcabin.desktop.explorer.ExplorerChildren;
/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.softcabin.desktop//Explorer//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "ExplorerTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "org.softcabin.desktop.ExplorerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ExplorerAction",
        preferredID = "ExplorerTopComponent")
@Messages({
    "CTL_ExplorerAction=Explorer",
    "CTL_ExplorerTopComponent=Explorer Softcabin",
    "HINT_ExplorerTopComponent=This is a Explorer Softcabin"
})
public final class ExplorerTopComponent extends TopComponent implements ExplorerManager.Provider{

    private static final String ROOT_NODE = "Explorer";
    private transient ExplorerManager manager = new ExplorerManager();
    
    public ExplorerTopComponent() {
        initComponents();
        setName(Bundle.CTL_ExplorerTopComponent());
        setToolTipText(Bundle.HINT_ExplorerTopComponent());
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_DRAGGING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);
        /* proprietes ajoutees */
        associateLookup(ExplorerUtils.createLookup(manager, getActionMap()));
        manager.setRootContext(new AbstractNode(new ExplorerChildren()));
        manager.getRootContext().setDisplayName("Explorer");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new BeanTreeView();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        ExplorerUtils.activateActions(manager, true);
    }

    @Override
    public void componentClosed() {
        ExplorerUtils.activateActions(manager, false);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return manager;
    }
    @Override
    public HelpCtx getHelpCtx() {
        //return new HelpCtx(getClass());
        return super.getHelpCtx();
    }
    
    private void initActions() {
        getActionMap().put(CutAction.get(CutAction.class).getActionMapKey(), 
              ExplorerUtils.actionCut(manager));
      getActionMap().put(CopyAction.get(CopyAction.class).getActionMapKey(), 
              ExplorerUtils.actionCopy(manager));
      getActionMap().put(PasteAction.get(PasteAction.class).getActionMapKey(), 
              ExplorerUtils.actionPaste(manager));
      getActionMap().put(DeleteAction.get(DeleteAction.class).getActionMapKey(), 
              ExplorerUtils.actionDelete(manager, true));
    }
}
